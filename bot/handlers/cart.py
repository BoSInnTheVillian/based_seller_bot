from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import CallbackQueryHandler, ContextTypes
from bot.storage import Storage
from bot.keyboards import main_menu_keyboard

db = Storage()

async def view_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    cart = db.get_cart(user_id)
    products = db.get_products()

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ ID —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
    items_count = {}
    for item_id in cart["items"]:
        items_count[item_id] = items_count.get(item_id, 0) + 1

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    cart_items = []
    total = 0
    for item_id, count in items_count.items():
        product = next((p for p in products if p["id"] == item_id), None)
        if product:
            sum_price = product["price"] * count
            cart_items.append({
                "id": product["id"],
                "name": product["name"],
                "price": product["price"],
                "count": count,
                "sum": sum_price
            })
            total += sum_price

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞</b>\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    if not cart_items:
        text += "\nüéà <i>–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</i>\n"
    else:
        for item in cart_items:
            text += (
                f"\n<b>{item['name']}</b>\n"
                f"‚îÇ\n"
                f"‚îú –¶–µ–Ω–∞: <code>{item['price']}‚ÇΩ</code>\n"
                f"‚îú –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{item['count']}</b>\n"
                f"‚îî –°—É–º–º–∞: <code>{item['sum']}‚ÇΩ</code>\n"
            )
    text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    text += f"üí≥ <b>–ò—Ç–æ–≥–æ: <code>{total}‚ÇΩ</code></b>"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ +/-
    keyboard = []
    for item in cart_items:
        keyboard.append([
            InlineKeyboardButton("‚ûñ", callback_data=f"decrease_{item['id']}"),
            InlineKeyboardButton(f"{item['name'][:20]}", callback_data=f"item_{item['id']}"),
            InlineKeyboardButton("‚ûï", callback_data=f"increase_{item['id']}")
        ])

    # –î–æ–±–∞–≤–ª—è–µ–º —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
    keyboard.append([
        InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart"),
        InlineKeyboardButton("üõçÔ∏è –í –∫–∞—Ç–∞–ª–æ–≥", callback_data="catalog")
    ])

    keyboard.append([
        InlineKeyboardButton("üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")
    ])

    await query.edit_message_text(
        text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def change_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    action, item_id = query.data.split('_')
    item_id = int(item_id)
    user_id = query.from_user.id

    cart = db.get_cart(user_id)

    if action == "increase":
        cart["items"].append(item_id)
        await query.answer(f"–î–æ–±–∞–≤–ª–µ–Ω 1 —Ç–æ–≤–∞—Ä")
    elif action == "decrease":
        for i, cart_item_id in enumerate(cart["items"]):
            if cart_item_id == item_id:
                cart["items"].pop(i)
                await query.answer(f"–£–¥–∞–ª—ë–Ω 1 —Ç–æ–≤–∞—Ä")
                break

    db.save_cart(user_id, cart)
    await view_cart(update, context)

async def clear_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.callback_query.from_user.id
    db.save_cart(user_id, {"items": []})
    await update.callback_query.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!")
    await view_cart(update, context)

cart_handlers = [
        CallbackQueryHandler(view_cart, pattern="^view_cart$"),
        CallbackQueryHandler(change_quantity, pattern="^(increase|decrease)_"),
        CallbackQueryHandler(clear_cart, pattern="^clear_cart$")
    ]