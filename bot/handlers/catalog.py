from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import CallbackQueryHandler, ContextTypes, MessageHandler, filters
from bot.storage import Storage
from bot.keyboards import (
    items_keyboard,
    main_menu_reply_keyboard,
    product_keyboard,
    back_to_menu_reply_keyboard,
    gold_quantity_keyboard, back_to_main_inline_keyboard, main_menu_inline_keyboard
)
from bot.handlers.cart import view_cart
from PIL import Image
from io import BytesIO

img_path = "assets/fyp.jpg"
db = Storage()
user_states = {}

async def show_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ–≤–∞—Ä–æ–≤"""
    query = update.callback_query
    await query.answer()
    try:
        parts = query.data.split('_')
        if len(parts) < 3:
            await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞")
            return
        category = parts[1]
        item_id = int(parts[2])
        item = next((i for i in db.get_products() if i['id'] == item_id and i['category'] == category), None)
        if not item:
            await query.edit_message_text("‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        text = (
            f"<b>{item.get('name', '–£—Å–ª—É–≥–∞')}</b>\n\n"
            f"üí∞ –¶–µ–Ω–∞: <code>{item['price']} BYN</code>\n"
            f"üìù {item.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}"
        )
        await query.edit_message_text(
            text,
            parse_mode="HTML",
            reply_markup=product_keyboard(item_id, category)
        )
    except Exception as e:
        await query.edit_message_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

async def show_catalog_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ Standoff 2 GOLD —á–µ—Ä–µ–∑ callback"""
    query = update.callback_query
    await query.answer()
    try:
        all_items = db.get_products()
        gold_item = next((item for item in all_items if item['category'] == 'gold'), None)
        if not gold_item:
            await query.edit_message_text("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        user_id = query.from_user.id
        user_states[user_id] = {
            'item_id': gold_item['id'],
            'category': 'gold',
            'price': gold_item['price'],
            'name': gold_item['name']
        }
        await query.edit_message_text(
            f"üü°<b>{gold_item['name']}</b>üü°\n\n"
            f"üí∞ –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: <code>{gold_item['price']} BYN</code>\n\n"
            f"‚û°Ô∏è <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–¥—ã (–º–∏–Ω–∏–º—É–º 100):</b>",
            parse_mode="HTML",
            reply_markup=gold_quantity_keyboard()
        )
    except Exception as e:
        await query.edit_message_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")

async def show_catalog_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ Standoff 2 GOLD —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        all_items = db.get_products()
        gold_item = next((item for item in all_items if item['category'] == 'gold'), None)
        if not gold_item:
            await update.message.reply_text("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=main_menu_inline_keyboard())
            return
        user_id = update.message.from_user.id
        user_states[user_id] = {
            'item_id': gold_item['id'],
            'category': 'gold',
            'price': gold_item['price'],
            'name': gold_item['name']
        }
        await context.bot.send_message(
            chat_id=update.message.chat_id,
            text=f"üü°<b>{gold_item['name']}</b>üü°\n\n"
                 f"üí∞ –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: <code>{gold_item['price']} BYN</code>\n\n"
                 f"‚û°Ô∏è <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–¥—ã (–º–∏–Ω–∏–º—É–º 100):</b>",
            parse_mode="HTML",
            reply_markup=gold_quantity_keyboard()
        )
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}", reply_markup=main_menu_inline_keyboard())

async def show_catalog_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ Standoff 2 GOLD —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        all_items = db.get_products()
        gold_item = next((item for item in all_items if item['category'] == 'gold'), None)
        if not gold_item:
            await update.message.reply_text("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        user_id = update.message.from_user.id
        user_states[user_id] = {
            'item_id': gold_item['id'],
            'category': 'gold',
            'price': gold_item['price'],
            'name': gold_item['name']
        }
        await update.message.reply_text(
            f"üü°<b>{gold_item['name']}</b>üü°\n\n"
            f"üí∞ –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: <code>{gold_item['price']} BYN</code>\n\n"
            f"‚û°Ô∏è <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–¥—ã (–º–∏–Ω–∏–º—É–º 100):</b>",
            parse_mode="HTML",
            reply_markup=gold_quantity_keyboard()
        )
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")

async def handle_gold_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è gold –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    if user_id not in user_states or 'quantity' not in user_states[user_id]:
        await query.answer("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞", reply_markup=main_menu_reply_keyboard())
        return
    if query.data == "confirm_gold":
        await query.answer("‚úÖ Gold –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
        item_info = user_states[user_id]
        cart = db.get_cart(user_id)
        if "items" not in cart:
            cart["items"] = []
        cart["items"].extend([item_info['item_id']] * item_info['quantity'])
        db.save_cart(user_id, cart)
        await query.edit_message_text(
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {item_info['quantity']} gold –≤ –∫–æ—Ä–∑–∏–Ω—É!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="view_cart")],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="to_main_menu")],
            ])
        )
    else:
        await query.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await query.edit_message_text(
            "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="to_main_menu")],
            ])
        )
    del user_states[user_id]

async def handle_gold_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ gold"""
    user_id = update.message.from_user.id
    if user_id not in user_states:
        return
    try:
        quantity = int(update.message.text)
        if quantity < 100:
            await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 100")
            return
        if quantity > 1000000:
            await update.message.reply_text("‚ùå –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
            return
        item_info = user_states[user_id]
        total_price = item_info['price'] * quantity
        user_states[user_id]['quantity'] = quantity
        user_states[user_id]['total_price'] = total_price
        await update.message.reply_text(
            f"‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>\n\n"
            f"üü°–¢–æ–≤–∞—Ä: <b>{item_info['name']}</b>üü°\n"
            f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{quantity} –≥–æ–ª–¥—ã</b>\n"
            f"üí∞ –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: <code>{item_info['price']} BYN</code>\n"
            f"üíµ –ò—Ç–æ–≥–æ: <code>{total_price} BYN</code>\n\n"
            f"‚û°Ô∏è <b>–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É?</b>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –î–∞, –¥–æ–±–∞–≤–∏—Ç—å", callback_data="confirm_gold")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_gold")]
            ])
        )
    except ValueError:
        pass

async def handle_gold_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è gold –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    if query.data == "cancel_gold":
        await query.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        img = Image.open(img_path)
        img_buffer = BytesIO()
        img.save(img_buffer, format="JPEG")
        img_buffer.seek(0)

        await query.message.reply_text(
            "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=main_menu_reply_keyboard()
        )
        await query.message.delete()
        if user_id in user_states:
            del user_states[user_id]
        return
    if user_id not in user_states or 'quantity' not in user_states[user_id]:
        await query.answer("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        img = Image.open(img_path)
        img_buffer = BytesIO()
        img.save(img_buffer, format="JPEG")
        img_buffer.seek(0)
        await query.message.reply_text(
            "‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞",
            reply_markup=main_menu_reply_keyboard()
        )
        await query.message.delete()
        return
    if query.data == "confirm_gold":
        await query.answer("‚úÖ Gold –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
        item_info = user_states[user_id]
        cart = db.get_cart(user_id)
        if "items" not in cart:
            cart["items"] = []
        cart["items"].extend([item_info['item_id']] * item_info['quantity'])
        db.save_cart(user_id, cart)

        await query.edit_message_text(
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {item_info['quantity']} gold –≤ –∫–æ—Ä–∑–∏–Ω—É!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="view_cart")],
            ])
        )
        del user_states[user_id]

async def show_options_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ TG-Premium —á–µ—Ä–µ–∑ callback"""
    query = update.callback_query
    await query.answer()
    try:
        all_items = db.get_products()
        premium_items = [item for item in all_items if item['category'] == 'premium']
        await query.edit_message_text(
            "üíé ‚ú®Tg premium‚ú®",
            reply_markup=items_keyboard(premium_items, 'premium')
        )
    except Exception as e:
        await query.edit_message_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å–ª—É–≥: {str(e)}")

async def show_options_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ TG-Premium —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        all_items = db.get_products()
        premium_items = [item for item in all_items if item['category'] == 'premium']
        await update.message.reply_text(
            "üíé ‚ú®Tg premium‚ú®",
            reply_markup=items_keyboard(premium_items, 'premium')
        )
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å–ª—É–≥: {str(e)}")

async def add_to_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É (–¥–ª—è premium)"""
    query = update.callback_query
    await query.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
    try:
        item_id = int(query.data.split('_')[1])
        user_id = query.from_user.id
        cart = db.get_cart(user_id)
        if "items" not in cart:
            cart["items"] = []
        cart["items"].append(item_id)
        db.save_cart(user_id, cart)
        item = next((i for i in db.get_products() if i['id'] == item_id), None)
        if item:
            await query.edit_message_reply_markup(reply_markup=product_keyboard(item_id, item['category']))
    except Exception as e:
        await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def show_review_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –û—Ç–∑—ã–≤—ã —á–µ—Ä–µ–∑ callback"""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        f"<b>–ê –∑–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤—ã</b> üëá\n"
        f"<b>–û—Ç–∑—ã–≤—ã: https://t.me/zyg0o_info/11</b>",
        parse_mode="HTML",
        reply_markup=back_to_menu_reply_keyboard()
    )

async def show_review_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –û—Ç–∑—ã–≤—ã —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    await update.message.reply_text(
        f"<b>–ê –∑–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤—ã</b> üëá\n"
        f"<b>–û—Ç–∑—ã–≤—ã: https://t.me/zyg0o_info/11</b>",
        parse_mode="HTML",
        reply_markup=back_to_menu_reply_keyboard()
    )

async def handle_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥"""
    query = update.callback_query
    await query.answer()
    try:
        category = query.data.split('_')[1]
        if category == 'gold':
            await back_to_main_callback(update, context)
        elif category == 'premium':
            await show_options_callback(update, context)
        else:
            await back_to_main_callback(update, context)
    except:
        await back_to_main_callback(update, context)

async def back_to_main_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ callback"""
    query = update.callback_query
    await query.answer()

    img = Image.open(img_path)
    img_buffer = BytesIO()
    img.save(img_buffer, format="JPEG")
    img_buffer.seek(0)

    await query.message.reply_photo(photo=img_buffer)
    await query.message.reply_text(
        f"\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ZUGshop! –≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≥–æ–ª–¥—ã –≤ standoff 2 –∏ –¢–ì-–ø—Ä–µ–º–∏—É–º–∞. \n \n–î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏. \n \n –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @zyg0o.",
        reply_markup=main_menu_reply_keyboard()
    )
    await query.message.delete()

async def back_to_main_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    img = Image.open(img_path)
    img_buffer = BytesIO()
    img.save(img_buffer, format="JPEG")
    img_buffer.seek(0)
    await update.message.reply_photo(
        photo=img_buffer
    )
    await update.message.reply_text(
        f"\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ZUGshop! –≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≥–æ–ª–¥—ã –≤ standoff 2 –∏ –¢–ì-–ø—Ä–µ–º–∏—É–º–∞. \n \n–î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏. \n \n –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @zyg0o.",
        reply_markup=main_menu_reply_keyboard()
    )


async def handle_menu_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏"""
    from bot.handlers.cart import view_cart_message  # –î–æ–±–∞–≤—å—Ç–µ –∏–º–ø–æ—Ä—Ç

    text = update.message.text
    if text == "üí∞ Standoff 2 GOLD":
        await show_catalog_message(update, context)
    elif text == "üíé TG-Premium":
        await show_options_message(update, context)
    elif text == "üõí –ö–æ—Ä–∑–∏–Ω–∞":
        await view_cart_message(update, context)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
    elif text == "‚≠ê –û—Ç–∑—ã–≤—ã":
        await show_review_message(update, context)
    elif text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await back_to_main_message(update, context)
async def back_to_main_after_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã"""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        f"\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ZUGshop! –≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≥–æ–ª–¥—ã –≤ standoff 2 –∏ –¢–ì-–ø—Ä–µ–º–∏—É–º–∞. \n \n–î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏. \n \n –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
        reply_markup=main_menu_reply_keyboard()
    )

catalog_handlers = [
    CallbackQueryHandler(show_catalog_callback, pattern="^catalog$"),
    CallbackQueryHandler(show_options_callback, pattern="^options$"),
    CallbackQueryHandler(show_item, pattern="^item_"),
    CallbackQueryHandler(add_to_cart, pattern="^add_"),
    CallbackQueryHandler(handle_back, pattern="^back_"),
    CallbackQueryHandler(back_to_main_callback, pattern="^to_main_menu$"),
    CallbackQueryHandler(back_to_main_after_cancel, pattern="^to_main_menu_after_cancel$"),
    CallbackQueryHandler(handle_gold_confirmation, pattern="^(confirm_gold|cancel_gold|to_main_menu_after_cancel)$"),
    CallbackQueryHandler(view_cart, pattern="^view_cart$"),
    CallbackQueryHandler(show_review_callback, pattern="^show_review"),
    MessageHandler(filters.TEXT & ~filters.COMMAND & filters.Regex(r'^\d+$'), handle_gold_quantity),
    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu_buttons)
]
