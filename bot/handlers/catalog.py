from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import CallbackQueryHandler, ContextTypes, MessageHandler, filters
from bot.handlers.cart import view_cart
from bot.storage import Storage
from bot.keyboards import (
    items_keyboard,
    main_menu_keyboard,
    product_keyboard,
    back_to_menu_keyboard
)

db = Storage()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
user_states = {}


async def show_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ–≤–∞—Ä–æ–≤"""
    query = update.callback_query
    await query.answer()

    try:
        # –§–æ—Ä–º–∞—Ç: item_{category}_{id}
        parts = query.data.split('_')
        if len(parts) < 3:
            await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞")
            return

        category = parts[1]
        item_id = int(parts[2])

        item = next((i for i in db.get_products() if i['id'] == item_id and i['category'] == category), None)
        if not item:
            await query.edit_message_text("‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        # –î–ª—è –í–°–ï–• —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        text = (
            f"<b>{item.get('name', '–£—Å–ª—É–≥–∞')}</b>\n\n"
            f"üí∞ –¶–µ–Ω–∞: <code>{item['price']} BYN</code>\n"
            f"üìù {item.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}"
        )

        await query.edit_message_text(
            text,
            parse_mode="HTML",
            reply_markup=product_keyboard(item_id, category)
        )

    except Exception as e:
        await query.edit_message_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")


async def show_catalog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ Standoff 2 GOLD - —Å—Ä–∞–∑—É –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"""
    query = update.callback_query
    await query.answer()

    try:
        all_items = db.get_products()
        gold_item = next((item for item in all_items if item['category'] == 'gold'), None)

        if not gold_item:
            await query.edit_message_text("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = query.from_user.id
        user_states[user_id] = {
            'item_id': gold_item['id'],
            'category': 'gold',
            'price': gold_item['price'],
            'name': gold_item['name']
        }

        await query.edit_message_text(
            f"ü™ô <b>{gold_item['name']}</b>\n\n"
            f"üí∞ –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: <code>{gold_item['price']} BYN</code>\n\n"
            f"‚û°Ô∏è <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–¥—ã –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å (–º–∏–Ω–∏–º—É–º 100):</b>",
            parse_mode="HTML",
            reply_markup=back_to_menu_keyboard()
        )

    except Exception as e:
        await query.edit_message_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")

async def handle_gold_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ gold"""
    user_id = update.message.from_user.id

    if user_id not in user_states:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ –º–µ–Ω—é")
        return

    try:
        quantity = int(update.message.text)
        if quantity <= 100:
            await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 100")
            return
        if quantity > 1000000:
            await update.message.reply_text("‚ùå –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
            return

        item_info = user_states[user_id]
        total_price = item_info['price'] * quantity

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
        user_states[user_id]['quantity'] = quantity
        user_states[user_id]['total_price'] = total_price

        await update.message.reply_text(
            f"‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>\n\n"
            f"ü™ô –¢–æ–≤–∞—Ä: <b>{item_info['name']}</b>\n"
            f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{quantity} –≥–æ–ª–¥—ã</b>\n"
            f"üí∞ –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: <code>{item_info['price']} BYN</code>\n"
            f"üíµ –ò—Ç–æ–≥–æ: <code>{total_price} BYN</code>\n\n"
            f"‚û°Ô∏è <b>–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É?</b>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –î–∞, –¥–æ–±–∞–≤–∏—Ç—å", callback_data="confirm_gold")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_gold")]
            ])
        )

    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")


async def handle_gold_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–≤–µ—Ä—Ö–±—ã—Å—Ç—Ä–∞—è –≤–µ—Ä—Å–∏—è"""
    query = update.callback_query
    await query.answer()  # –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç

    user_id = query.from_user.id

    # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    if user_id not in user_states:
        return  # –ü—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, —Ç.–∫. —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏

    item_info = user_states.get(user_id)
    if not item_info or 'quantity' not in item_info:
        return

    if query.data == "confirm_gold":
        # –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
        cart = db.get_cart(user_id)
        if "items" not in cart:
            cart["items"] = []

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—á–∫–æ–π
        cart["items"].extend([item_info['item_id']] * item_info['quantity'])
        db.save_cart(user_id, cart)

        # –ë—ã—Å—Ç—Ä–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await query.edit_message_text(
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {item_info['quantity']} gold –≤ –∫–æ—Ä–∑–∏–Ω—É!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="view_cart")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="to_main_menu")]
            ])
        )

        del user_states[user_id]


async def show_options(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    try:
        all_items = db.get_products()
        premium_items = [item for item in all_items if item['category'] == 'premium']
        await query.edit_message_text(
            "üíé ‚ú®Tg premium‚ú®",
            reply_markup=items_keyboard(premium_items, 'premium')
        )
    except Exception as e:
        await query.edit_message_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å–ª—É–≥: {str(e)}")


async def add_to_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É (–¥–ª—è premium)"""
    query = update.callback_query
    await query.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")  # –û—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É
    user_id = query.from_user.id
    if user_id not in user_states:
        await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞")
        return
    try:
        item_id = int(query.data.split('_')[1])
        user_id = query.from_user.id

        # –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        cart = db.get_cart(user_id)
        if "items" not in cart:
            cart["items"] = []
        cart["items"].append(item_id)
        db.save_cart(user_id, cart)
        item_info = user_states[user_id]
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        item = next((i for i in db.get_products() if i['id'] == item_id), None)
        if item:
            await query.edit_message_reply_markup(
                reply_markup=product_keyboard(item_id, item['category'])
            )

    except Exception as e:
        await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def ask_consultant(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞"""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        "üí° –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É...",
        reply_markup=back_to_menu_keyboard()
    )


async def handle_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥"""
    query = update.callback_query
    await query.answer()

    try:
        category = query.data.split('_')[1]
        if category == 'gold':
            await back_to_main(update, context)
        elif category == 'premium':
            await show_options(update, context)
        else:
            await back_to_main(update, context)
    except:
        await back_to_main(update, context)


async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()

    await query.edit_message_text(#–¥–æ–±–∞–≤–∏—Ç—å —Å—é–¥–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É
        f"\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ZUGshop! –≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≥–æ–ª–¥—ã –≤ standoff 2 –∏ –¢–ì-–ø—Ä–µ–º–∏—É–º–∞. \n \n–î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏. \n \n –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
        reply_markup=main_menu_keyboard()
    )


catalog_handlers = [
    CallbackQueryHandler(show_catalog, pattern="^catalog$"),  # –¢–æ–ª—å–∫–æ –¥–ª—è gold
    CallbackQueryHandler(show_options, pattern="^options$"),  # –¢–æ–ª—å–∫–æ –¥–ª—è premium
    CallbackQueryHandler(show_item, pattern="^item_"),  # –î–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    CallbackQueryHandler(add_to_cart, pattern="^add_"),  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
    CallbackQueryHandler(handle_back, pattern="^back_"),  # –ù–∞–∑–∞–¥
    CallbackQueryHandler(back_to_main, pattern="^to_main_menu$"),
    CallbackQueryHandler(ask_consultant, pattern="^ask_consultant$"),
    CallbackQueryHandler(handle_gold_confirmation, pattern="^(confirm_gold|cancel_gold)$"),
    CallbackQueryHandler(view_cart, pattern="^view_cart$"),
    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_gold_quantity),
]