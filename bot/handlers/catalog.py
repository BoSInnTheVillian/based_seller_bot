from telegram import Update
from telegram.ext import CallbackQueryHandler, ContextTypes
from bot.storage import Storage
from bot.keyboards import (
    items_keyboard,
    main_menu_keyboard,
    product_keyboard,
    back_to_menu_keyboard
)
from typing import Optional

db = Storage()





async def show_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    try:
        item_id = int(query.data.split('_')[1])
        item = next((i for i in db.get_products() if i['id'] == item_id), None)
        print(item['type'])
        if not item:
            await query.edit_message_text("‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        # –§–ò–ö–°: –î–ª—è –∫–ª–∏–Ω–∏–Ω–≥–∞ —É–±–∏—Ä–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        text = (
            f"ü§ñ <b>{item.get('name', '–£—Å–ª—É–≥–∞')}</b>\n\n"
            f"üí∞ –¶–µ–Ω–∞: <code>{item['price']}‚ÇΩ</code>\n"
            f"üìù {item.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}"
        )

        await query.edit_message_text(
            text,
            parse_mode="HTML",
            reply_markup=product_keyboard(item_id)  # –§–ò–ö–°: –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        )

    except Exception as e:
        await query.edit_message_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

# –§–ò–ö–°: –£–±–∏—Ä–∞–µ–º show_category —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π
async def show_catalog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    try:
        all_items = db.get_products()
        bots = [item for item in all_items if item['category'] == 'gold']
        await query.edit_message_text(
            "üßà Standoff 2 gold",
            reply_markup=items_keyboard(bots)
        )
    except Exception as e:
        await query.edit_message_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–æ–≤: {str(e)}")

# –§–ò–ö–°: –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ - —É–±–∏—Ä–∞–µ–º category_

async def show_options(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    try:
        all_items = db.get_products()
        options = [item for item in all_items if item['category'] == 'premium']
        await query.edit_message_text(
            " Tg premium",
            reply_markup=items_keyboard(options)
        )
    except Exception as e:
        await query.edit_message_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å–ª—É–≥: {str(e)}")



async def add_to_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    query = update.callback_query
    await query.answer()

    try:
        item_id = int(query.data.split('_')[1])
        user_id = query.from_user.id

        db.add_to_cart(user_id, item_id)
        await query.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–≤–∞—Ä–æ–º
        item = next(i for i in db.get_products() if i['id'] == item_id)
        await query.edit_message_reply_markup(
            reply_markup=product_keyboard(item_id, item['category'])
        )

    except Exception as e:
        await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def ask_consultant(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞"""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        "üí° –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É...",
        reply_markup=back_to_menu_keyboard()
    )

async def show_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    query = update.callback_query
    await query.answer()

    try:
        category = query.data.split('_', 1)[1]
        items = [i for i in db.get_products() if i.get('category') == category]

        if not items:
            await query.edit_message_text(
                f"üòï –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤",
                reply_markup=back_to_menu_keyboard()
            )
            return

        await query.edit_message_text(
            f"üè∑Ô∏è –¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}':",
            reply_markup=items_keyboard(items)
        )

    except Exception as e:
        await query.edit_message_text(
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=back_to_menu_keyboard()
        )




async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()

    await query.edit_message_text(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu_keyboard()
    )


catalog_handlers = [
        CallbackQueryHandler(show_catalog, pattern="^catalog$"),
        CallbackQueryHandler(show_category, pattern="^category_"),
        CallbackQueryHandler(back_to_main, pattern="^to_main_menu$"),
        CallbackQueryHandler(show_item, pattern="^item_"),
        CallbackQueryHandler(add_to_cart, pattern="^add_"),
        CallbackQueryHandler(show_item, pattern="^select_item_"),  # –î–æ–±–∞–≤–ª–µ–Ω–æ
        CallbackQueryHandler(ask_consultant, pattern="^ask_consultant$"),
        CallbackQueryHandler(show_options, pattern="^options")
    ]